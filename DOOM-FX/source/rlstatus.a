;**********************************************************************
;*                                                                    *
;*                   P R O J E C T :   REALITY_ENGINE                 *
;*                                                                    *
;*                           STATUS BAR MODULE                        *
;*                                                                    *
;**********************************************************************

	include	rage.i
	include	rle.i
	include	rlstatus.i
	include	snes.i
	include	xfer.i


	SECTION	ENGINE
;
;	* * * * * * *       INITIALIZE STATUS BAR       * * * * * * *
;
	dbr	?
	dpr	0
_RLInitStatusBar
	mode	'AX!'
	ldx	#(MaxOAMs*2/8)-2		; Clear Sprites' OAMAux
	lda	#0
_RISB100
	sta	OAMAA,x
	dex
	dex
	bpl	_RISB100
;
	lda	#%1000000000000000		; 2x2, HMsb=0
	sta	OAMAA+4
	lda	#%1010101010101010		; 2x2, HMsb=0
	sta	OAMAA+6
;
	ldx	#((3+8+(StatFaceCharX*StatFaceCharY)+3+3+3)*4)-2 ; Initialize Fixed OAMs
_RISB200
	lda	>_RLStatOAMs,x
	sta	OAMA+(00*4),x
	dex
	dex
	bpl	_RISB200
;
	mode	'a!'
	ldx	#<StatusBarXFer			; Transfer StatusBar DataBlock
	lda	#^StatusBarXFer
	jsl	XFer
;
;	* * * * * * *       INITIALIZE STATUS BAR NUMBERS       * * * * * * *
;
	mode	'a!'
	lda	#%00000001			; A->B, Abs., Auto Inc,2-Add-WriteLH
	sta	DMA0INC
	lda	#<VMDATAL			; VMDATA
	sta	DMA0DEST
	lda	#^DeCompBuffer
	sta	DMA0A1B
	mode	'A!'
	lda	#10-1				; 10 Digits to Transfer
	sta	Temp
	lda	#<(DeCompBuffer)
	ldy	#vmNUMDEF
_RISB400
	sta	DMA0A1L				; First Line
	sty	VMADDL
	ldx	#(StatNumCharX*32)
	stx	DMA0NUML
	ldx	#(0<<8)+(1)
	stx	MDMAEN
;
	clc					; Second Line
	adc	#(StatNumsX*StatNumCharX*32)
	sta	DMA0A1L
	pha
	tya
	xba					; Add $100
	inc	a
	xba
	sta	VMADDL
	ldx	#(StatNumCharX*32)
	stx	DMA0NUML
	ldx	#(0<<8)+(1)
	stx	MDMAEN
;
	tya					; Next VRAM Address
	clc
	adc	#$120
	and	#$7ef0
	tay
	pla
	sec					; Next SOURCE Data
	sbc	#((StatNumsX-1)*StatNumCharX)*32)
	dec	Temp				; Next Digit
	bpl	_RISB400
	rtl

;
;	* * * * * * *       TABLE OF SPRITE OAMS       * * * * * * *
;
_RLStatOAMs
	dc.w	((StatKeyBPosY+00)<<8)+(StatKeyBPosX+00),(%00111100<<8)+<(((vmKEYSDEF&$1fff)>>4)+(00*1))
	dc.w	((StatKeyYPosY+00)<<8)+(StatKeyYPosX+00),(%00111110<<8)+<(((vmKEYSDEF&$1fff)>>4)+(01*1))
	dc.w	((StatKeyRPosY+00)<<8)+(StatKeyRPosX+00),(%00111100<<8)+<(((vmKEYSDEF&$1fff)>>4)+(02*1))
;
	dc.w	((StatArmsPosY+00)<<8)+(StatArmsPosX+00),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(00*1))
	dc.w	((StatArmsPosY+00)<<8)+(StatArmsPosX+08),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(01*1))
	dc.w	((StatArmsPosY+00)<<8)+(StatArmsPosX+16),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(02*1))
	dc.w	((StatArmsPosY+00)<<8)+(StatArmsPosX+24),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(03*1))
	dc.w	((StatArmsPosY+08)<<8)+(StatArmsPosX+00),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(04*1))
	dc.w	((StatArmsPosY+08)<<8)+(StatArmsPosX+08),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(05*1))
	dc.w	((StatArmsPosY+08)<<8)+(StatArmsPosX+16),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(06*1))
	dc.w	((StatArmsPosY+08)<<8)+(StatArmsPosX+24),(%00110010<<8)+<(((vmARMSDEF&$1fff)>>4)+(07*1))
;
	dc.w	((StatFacePosY+00)<<8)+(StatFacePosX+00),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(00*1))
	dc.w	((StatFacePosY+00)<<8)+(StatFacePosX+08),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(01*1))
	dc.w	((StatFacePosY+00)<<8)+(StatFacePosX+16),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(02*1))
	dc.w	((StatFacePosY+08)<<8)+(StatFacePosX+00),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(03*1))
	dc.w	((StatFacePosY+08)<<8)+(StatFacePosX+08),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(04*1))
	dc.w	((StatFacePosY+08)<<8)+(StatFacePosX+16),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(05*1))
	dc.w	((StatFacePosY+16)<<8)+(StatFacePosX+00),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(06*1))
	dc.w	((StatFacePosY+16)<<8)+(StatFacePosX+08),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(07*1))
	dc.w	((StatFacePosY+16)<<8)+(StatFacePosX+16),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(08*1))
	dc.w	((StatFacePosY+24)<<8)+(StatFacePosX+00),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(09*1))
	dc.w	((StatFacePosY+24)<<8)+(StatFacePosX+08),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(10*1))
	dc.w	((StatFacePosY+24)<<8)+(StatFacePosX+16),(%00110000<<8)+<(((vmFACEDEF&$1fff)>>4)+(11*1))
;
	dc.w	((StatAmmoPosY+00)<<8)+(StatAmmoPosX+00),(%00111100<<8)
	dc.w	((StatAmmoPosY+00)<<8)+(StatAmmoPosX+15),(%00111100<<8)
	dc.w	((StatAmmoPosY+00)<<8)+(StatAmmoPosX+31),(%00111100<<8)
;
	dc.w	((StatHealthPosY+00)<<8)+(StatHealthPosX+00),(%00111100<<8)
	dc.w	((StatHealthPosY+00)<<8)+(StatHealthPosX+15),(%00111100<<8)
	dc.w	((StatHealthPosY+00)<<8)+(StatHealthPosX+31),(%00111100<<8)
;
	dc.w	((StatArmorPosY+00)<<8)+(StatArmorPosX+00),(%00111100<<8)
	dc.w	((StatArmorPosY+00)<<8)+(StatArmorPosX+15),(%00111100<<8)
	dc.w	((StatArmorPosY+00)<<8)+(StatArmorPosX+31),(%00111100<<8)


;
;	* * * * * * *       TRANSFER LISTS       * * * * * * *
;
	mode	'@A@X'
StatusBarXFer
	dc.w	xftVRAM16			; Transfer StatusBar Def
	dc.4	RLStatusBarDef
	dc.4	vmSTATDEF
	dcb.w	3,0
;
	dc.w	xftVRAMF16+xftRAW		; Transfer Blank Keys/Character Def
	dc.4	StatusBarXFer0
	dc.4	vmKEYSDEF
	dc.w	(32*4)				; Fill 32 Bytes
StatusBarXFer0
	dcb.w	2,0
;
	dc.w	xftRAM				; Transfer StatNum Def
	dc.4	RLStatNumDef
	dc.4	DeCompBuffer
	dcb.w	3,0
;
	dc.w	xftEnd



	SECTION	ENGINE_RAMCODE
;
;	* * * * * * *       UPDATE STATUS BAR       * * * * * * *
;
	dbr	?
	dpr	0
_RLUpdateStatusBar
;
;	>>>   AMMO   <<<
;
	mode	'aX!'
	ldx	(PlayerAmmo+RLSNESGSUXVarsO)	; Get Player's Ammo Digits
	stx	WRDIVL
	lda	#10
	sta	WRDIVB
	lda	#StatAmmoPosY			; Normal Ammo?
	txy
	bpl	_RLUSB200
	lda	#MaxViewScanLines		; No, Fist/ChainSaw!
_RLUSB200
	sta	OAMA+(23*4)+oamsY
	sta	OAMA+(24*4)+oamsY
	sta	OAMA+(25*4)+oamsY
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(25*4)+oamsChr
	ldx	_RDDIVL
	stx	WRDIVL
	lda	#10
	sta	WRDIVB
	tay
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx	_RDDIVL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(23*4)+oamsChr
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(24*4)+oamsChr
;
;	>>>   HEALTH   <<<
;
	ldx	(PlayerHealth+RLSNESGSUXVarsO)	; Get Player's Health Digits
	stx	WRDIVL
	tya
	sta	WRDIVB
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(28*4)+oamsChr
	ldx	_RDDIVL
	stx	WRDIVL
	tya
	sta	WRDIVB
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx	_RDDIVL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(26*4)+oamsChr
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(27*4)+oamsChr
;
;	>>>   ARMOR   <<<
;
	ldx	(PlayerArmor+RLSNESGSUXVarsO)	; Get Player's Armor Digits
	stx	WRDIVL
	tya
	sta	WRDIVB
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(31*4)+oamsChr
	ldx	_RDDIVL
	stx	WRDIVL
	tya
	sta	WRDIVB
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	ldx	_RDDIVL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(29*4)+oamsChr
	ldx	_RDMPYL
	lda	>_RLStatNumOAMs,x
	sta	OAMA+(30*4)+oamsChr
;
	lda	#(rlfStatus)				; Status Built
	trb	RLFlags
	rts
;
;	* * * * * * *       TABLE OF SPRITE NUMBERS FOR STATUS DIGITS       * * * * * * *
;
_RLStatNumOAMs
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(0*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(1*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(2*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(3*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(4*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(5*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(6*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(7*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(8*2))+$10)&$1ee)
	dc.b	<(((((vmNUMDEF&$1fff)>>4)+(9*2))+$10)&$1ee)



	SECTION	ENGINE_GSUCODE
	cpu	sfx

;
;	* * * * * * *       ADD TO HEALTH SCORE       * * * * * * *
;
;	Add VALUE to HEALTH SCORE
;
;	R4	= Health to Add
;	R11     = Return Address
;
_RLAddHealth
	ife	useMULTIPLAYER
	move	r0,(<(PlayerObject+rloHealth))	; Get Player's Health
	endif
	ifn	useMULTIPLAYER
	move	r0,#rloHealth			; Get Player's Health
	move	r1,(<MPPlayerObject)
;	with	r0
	add	r1
;	to	r0
	ldw	(r0)
	endif
;	with	r0
	add	r4
	move	r1,#(200+1)
;	from	r0
	cmp	r1
	blt	_RAHH200
	moves	r0,r1
_RAHH200
	bra	_RLCalcFaceAnim			; ReCalculate Face Animation
;	from	r0
	sbk

;
;	* * * * * * *       SUBTRACT FROM HEALTH SCORE       * * * * * * *
;
;	Subtract VALUE from HEALTH SCORE
;
;	R4	= Health to Subtract
;	R11     = Return Address
;
_RLSubHealth
	ife	useMULTIPLAYER
	move	r0,(<(PlayerObject+rloHealth))	; Get Player's Health
	endif
	ifn	useMULTIPLAYER
	move	r0,#rloHealth			; Get Player's Health
	move	r1,(<MPPlayerObject)
;	with	r0
	add	r1
;	to	r0
	ldw	(r0)
	endif
;	with	r0
	sub	r4
	bpl	_RSHH200
	nop
;	with	r0
	sub	r0
_RSHH200
;	from	r0
	sbk
;
;	* * * * * * *       DETERMINE FACE ANIMATION       * * * * * * *
;
;	!!!   DANGER!!!   FALLS THROUGH FROM ABOVE!!!
;
_RLCalcFaceAnim
;
;	>>>   FACEANIM FOR INVULNERABLE   <<<
;
	move	r4,#<_FacesInvulnerableList	; Use Invulnerable Animation
	move	r0,(<InvulnerableCount)		; Does Player have Invulnerable?
	dec	r0
	bpl	_RCFA800			; Yes!
	nop
;
;	>>>   FACEANIM BASED ON HEALTH   <<<
;
	ife	useMULTIPLAYER
	move	r0,(<(PlayerObject+rloHealth))	; Get Player's Health
	endif
	ifn	useMULTIPLAYER
	move	r0,#rloHealth			; Get Player's Health
	move	r1,(<MPPlayerObject)
;	with	r0
	add	r1
;	to	r0
	ldw	(r0)
	endif
;	with	r0				; >>16
	lsr
;	with	r0
	lsr
;	with	r0
	lsr
;	with	r0
	lsr
	move	r1,#5
;	from	r0				; Health >= 80?
	cmp	r1
	move	r4,#<_FacesNormalList		; Base of FacesNormalList
	bge	_RCFA200
	from	r1				; Get FaceList Offset (0-4)
;	to	r0
	sub	r0
	move	r1,#(_FacesNormalList0-_FacesNormalList)
;	with	r0
	umult	r1
	with	r4
	add	r0
_RCFA200
;
;	>>>   CHECK IF PLAYER IS NOW DEAD   <<<
;
	ife	useMULTIPLAYER
	move	r0,(<(PlayerObject+rloHealth))	; Get Player's Health
	endif
	ifn	useMULTIPLAYER
	move	r0,#rloHealth			; Get Player's Health
	move	r1,(<MPPlayerObject)
;	with	r0
	add	r1
;	to	r0
	ldw	(r0)
	endif
	moves	r0,r0
	bne	_RCFA300
;	with	r0				; Player is NOT Dead
	sub	r0
	inc	r0				; Player IS Dead!
;
;	>>>   FACEANIM FOR DEAD PLAYER   <<<
;
	move	r4,#<_FacesDeadList
_RCFA300
	move	(<PlayerDead),r0
;
_RCFA800
	move	r1,(<PlayerFaceAnim0)		; Already using correct FaceAnim?
	from	r4				; @CMP@
;	to	r0
	sub	r1
	beq	_RCFA900			; Yes, don't restart it!
	nop
	move	(<PlayerFaceAnim0),r4		; Update FaceAnims
	move	(<PlayerFaceAnim),r4
	move	r0,#1				; Force FaceAnim Update Immediately!
	move	(<PlayerFaceCount),r0
_RCFA900
	jmp	r11				; Return to Caller
	nop


;
;	* * * * * * *       ANIMATE PLAYER FACE       * * * * * * *
;
_RLAnimFace
	move	r1,(<(FPSCount+RLGSUSNESXVarsO))
	move	r0,(<PlayerFaceCount)		; #Ticks for Current Face
;	with	r0
	sub	r1
	dec	r0
	bmi	_RAF400				; Change Face
	inc	r0				; Current Face Still Valid
_RAF100
	jmp	r11
	sbk
_RAF400
	move	r0,#^_FacesGetItemList		; Base Address of FaceAnims
	romb
	move	r14,(<PlayerFaceAnim)		; Pointer to FaceAnim
	getb					; Get next FaceNumber
	inc	r14
;	with	r0
	sex
	bpl	_RAF500				; Not done yet
	nop
	move	r14,(<PlayerFaceAnim0)		; Done -- Return to "Normal"
	move	(<PlayerFaceAnim),r14
	getb					; Get First Face
	inc	r14
_RAF500
	move	(<PlayerFace),r0		; Save new Face
	getb					; Get #Ticks for Face
	move	(<PlayerFaceCount),r0		; Save new Count
	inc	r14
	move	(<PlayerFaceAnim),r14		; Save Updated AnimPointer
_RAF800
	jmp	r11				; Return to Caller
	nop


;
;	* * * * * * *       LIST OF ANIMATION FOR INVULNERABLE       * * * * * * *
;
_FacesInvulnerableList
	dc.b	(1*2),10,-1				; Invulnerable
;
;	* * * * * * *       LIST OF ANIMATION FOR GETTING ITEM       * * * * * * *
;
_FacesGetItemList
	dc.b	(7*2),10,-1				; Get at 81%-100%
	dc.b	(8*2),10,-1				; Get at 61%-80%
	dc.b	(9*2),10,-1				; Get at 41%-60%
	dc.b	(10*2),10,-1				; Get at 21%-40%
	dc.b	(11*2),10,-1				; Get at  1%-20%
;
;	* * * * * * *       LIST OF ANIMATION FOR GETTING "GOOD" ITEM       * * * * * * *
;
_FacesGetItem2List
	dc.b	(2*2),10,-1				; Get at 81%-100%
	dc.b	(3*2),10,-1				; Get at 61%-80%
	dc.b	(4*2),10,-1				; Get at 41%-60%
	dc.b	(5*2),10,-1				; Get at 21%-40%
	dc.b	(6*2),10,-1				; Get at  1%-20%
;
;	* * * * * * *       LIST OF ANIMATION FOR GETTING HIT       * * * * * * *
;
_FacesHitList
	dc.b	(12*2),10,-1				; Hit at 81%-100%
	dc.b	(13*2),10,-1				; Hit at 61%-80%
	dc.b	(14*2),10,-1				; Hit at 41%-60%
	dc.b	(15*2),10,-1				; Hit at 21%-40%
	dc.b	(16*2),10,-1				; Hit at  1%-20%
;
;	* * * * * * *       LIST OF ANIMATION FOR NORMAL       * * * * * * *
;
_FacesNormalList
	dc.b	(18*2),15,(17*2),20,(18*2),20,(19*2),20,(18*2),20,(17*2),25,(18*2),9,(17*2),20
	dc.b	(18*2),20,(19*2),15,(18*2),20,(17*2),15,(18*2),25,(19*2),20,(18*2),9,(19*2),25,-1
_FacesNormalList0
	dc.b	(21*2),15,(20*2),20,(21*2),20,(22*2),20,(21*2),20,(20*2),25,(21*2),9,(20*2),20
	dc.b	(21*2),20,(22*2),15,(21*2),20,(20*2),15,(21*2),25,(22*2),20,(21*2),9,(22*2),25,-1
;
	dc.b	(24*2),15,(23*2),20,(24*2),20,(25*2),20,(24*2),20,(23*2),25,(24*2),9,(23*2),20
	dc.b	(24*2),20,(25*2),15,(24*2),20,(23*2),15,(24*2),25,(25*2),20,(24*2),9,(25*2),25,-1
;
	dc.b	(27*2),15,(26*2),20,(27*2),20,(28*2),20,(27*2),20,(26*2),25,(27*2),9,(26*2),20
	dc.b	(27*2),20,(28*2),15,(27*2),20,(26*2),15,(27*2),25,(28*2),20,(27*2),9,(28*2),25,-1
;
	dc.b	(30*2),15,(29*2),20,(30*2),20,(31*2),20,(30*2),20,(29*2),25,(30*2),9,(29*2),20
	dc.b	(30*2),20,(31*2),15,(30*2),20,(29*2),15,(30*2),25,(31*2),20,(30*2),9,(31*2),25,-1
;
	dc.b	(30*2),15,(29*2),20,(30*2),20,(31*2),20,(30*2),20,(29*2),25,(30*2),9,(29*2),20
	dc.b	(30*2),20,(31*2),15,(30*2),20,(29*2),15,(30*2),25,(31*2),20,(30*2),9,(31*2),25,-1
_FacesDeadList
	dc.b	(0*2),1,-1				; Dead


;
;	* * * * * * *       STATUS BAR DATA       * * * * * * *
;
	SECTION	RL_STATUSBAR_DATA,RELOC,BASE=$80000000,RORG=$400000
RLStatusBarDef
	image	RLDATA:COMP/Status.def0


;
;	* * * * * * *       STATUS BAR NUMBERS DATA       * * * * * * *
;
	SECTION	RL_STATUSNUM_DATA,RELOC,BASE=$80000000,RORG=$400000
RLStatNumDef
	image	RLDATA:COMP/StatNum.def0

;
;	* * * * * * *       STATUS BAR FACES DATA       * * * * * * *
;
	SECTION	RL_STATUSFACES_DATA,RELOC,BASE=$80000000,RORG=$400000
RLStatFacesDef
	image	RLDATA:COMP/StatFaces.def0

;
;	* * * * * * *       STATUS BAR KEYS DATA       * * * * * * *
;
	SECTION	RL_STATUSKEYS_DATA,RELOC,BASE=$80000000,RORG=$400000
RLStatKeysDef
	image	RLDATA:COMP/StatKeys.def0

;
;	* * * * * * *       STATUS BAR ARMS DATA       * * * * * * *
;
	SECTION	RL_STATUSARMS_DATA,RELOC,BASE=$80000000,RORG=$400000
RLStatArmsDef
	image	RLDATA:COMP/StatArms.def0
