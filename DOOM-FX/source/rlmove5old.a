;**********************************************************************
;*                                                                    *
;*                   P R O J E C T :   REALITY_ENGINE                 *
;*                                                                    *
;*                       OBJECT MOVEMENT MODULE 5                     *
;*                                                                    *
;*                      ENEMY <-> LINE COLLISIONS 2                   *
;*                                                                    *
;**********************************************************************

	include	rage.i
	include	rle.i
	include	gsumac.i
	include	rlobjects.i


	public	_RLMoveXY5


	SECTION	ENGINE_GSUCODE
	cpu	sfx


rX0		equ	r7			;  Current X Coordinate
rY0		equ	r8			;  Current Y Coordinate
rVX		equ	r9			; Velocity X
rVY		equ	r10			; Velocity Y
rX1		equ	rVX			;  Attempt X Coordinate
rY1		equ	rVY			;  Attempt Y Coordinate
;
rObj		equ	r12			; Pointer to RLObject
rObjP		equ	r11			; Pointer to RLObject
;
rLX1		equ	r12			; Line Vertex 1 X
rLY1		equ	r13			; Line Vertex 1 Y
rPUX		equ	r3			; Line Perpendicular UnitVector X
rPUY		equ	r5			; Line Perpendicular UnitVector Y
;
rMoveLinesPtr	equ	rPUY			; MoveLines Entry Pointer
;
rTemp		equ	r14			; Temporary Variable
;
rSector		equ	r6			; Object's Sector


	align	16,(_RLMoveXY5-_RM5XY2000)&$0f
;
;	* * * * * * *       REALITY_ENGINE MOVE RLOBJECT XY       * * * * * * *
;
_RLMoveXY5
;
;	>>>   GET OBJECT CURRENT COORDINATES/VELOCITIES   <<<
;
	move	rObj,(<MVRObj)			; Get RLObject Pointer
	from	rObj				; Move to X Coordinate
;	to	r0
	add	#rloX
	to	r1				; rX0:r1 = X Coordinate
	ldw	(r0)
	inc	r0
	inc	r0
	to	rX0
	ldw	(r0)
	move	(<MVRX),rX0
;
	inc	r0				; rY0:r2 = Y Coordinate
	inc	r0
	to	r2
	ldw	(r0)
	inc	r0
	inc	r0
	to	rY0
	ldw	(r0)
	move	(<MVRY),rY0
;
	inc	r0				; r4 = Z Coordinate
	inc	r0
	to	r4
	ldw	(r0)
	move	(<MVIZ),r4
;
	inc	r0				; rVX = X Velocity
	inc	r0
	to	rVX
	ldw	(r0)
;
	inc	r0				; rVY = Y Velocity
	inc	r0
	to	rVY
	ldw	(r0)
;
	move	(<MVVX),rVX			; Velocity X
	move	(<MVVY),rVY			; Velocity Y
;
	ibt	r0,#(^InvTable)			; Bank of InverseTable
	romb

;
;	* * * * * * *       ATTEMPT TO MOVE OBJECT       * * * * * * *
;
_RM5XY1000
;
;	>>>   CALCULATE OBJECT MOVEMENT DESTINATION COORDINATES   <<<
;
	from	rVX				; X Velocity Fraction
;	to	r0
	lob
;	with	r0
	swap
	with	r1				; X Coordinate Fraction
	add	r0
;
	from	rVX				; X Velocity Integer
;	to	r0
	hib
;	with	r0
	sex
;	from	r0				; X Coordinate Integer
	to	rX1
	adc	rX0
;
	move	r0,#$7fff			; Percentage of Movement Allowed
	move	(<MVIPercent),r0
;
	from	rVY				; Y Velocity Fraction
;	to	r0
	lob
;	with	r0
	swap
	with	r2				; Y Coordinate Fraction
	add	r0
;
	move	r0,#<(_RLMoveLines-rlmlSize)	; Start of MoveLines List
	move	(<MVMLPtr),r0
;
	from	rVY				; Y Velocity Integer
;	to	r0
	hib
;	with	r0
	sex
;	from	r0				; Y Coordinate Integer
	to	rY1
	adc	rY0

;
;	* * * * * * *       CHECK MOVEMENT AGAINST LINELIST       * * * * * * *
;
	CACHEB	_RLMoveXY5
_RM5XY2000
;
;	>>>   CHECK NEXT MOVELINE   <<<
;
_RM5XY2200
	move	rMoveLinesPtr,(<MVMLPtr)	; Get MoveLines Pointer
	move	r0,#rlmlSize			; Move to next MoveLine
	with	rMoveLinesPtr
	add	r0
	from	rMoveLinesPtr
	sbk
	to	r2				; Get Next Line#
	ldw	(rMoveLinesPtr)
	inc	r2
	bne	_RM5XY2220
	inc	rMoveLinesPtr			; Move to Line Vertex 1 X
	iwt	r15,#<_RM5XY8000		; Finished Scanning MoveLines!
;
;	>>>   GET VERTEX 1 COORDINATES   <<<
;
_RM5XY2220
	inc	rMoveLinesPtr			; Move to Line Vertex 1 X
	to	rLX1
	ldw	(rMoveLinesPtr)
	inc	rMoveLinesPtr
	inc	rMoveLinesPtr
	to	rLY1
	ldw	(rMoveLinesPtr)
;
;	>>>   GET LINE PERPENDICULAR COMPONENTS   <<<
;
	inc	rMoveLinesPtr
	inc	rMoveLinesPtr
	to	r6				; Perpendicular UnitVector X
	ldw	(rMoveLinesPtr)
	from	r6				; Adjust LineY Towards Movement
	to	rPUX
	not
	inc	rPUX
	inc	rMoveLinesPtr
	inc	rMoveLinesPtr
	to	rPUY				; Perpendicular UnitVector Y
	ldw	(rMoveLinesPtr)
	move	r1,(<MVObjD)			; Object<->Line Collision Radius
	from	r1
;	to	r0
	fmult
	move	(<MVLRY),r0
	move	r6,rPUY				; Adjust LineX Towards Movement
	from	r1
;	to	r0
	fmult
	move	(<MVLRX),r0			; UnitVector X
;
;	>>>   DETERMINE DIRECTION LINE IS CROSSED (R->L OR L->R)   <<<
;
	from	rY0				; R1 = (ObjectY0 - LineY)
	to	r1
	sub	rLY1
	from	rX0				; R0 = (ObjectX0 - LineX)
;	to	r0
	sub	rLX1
	link	#4
	iwt	r15,#<_RM5XY4100
	with	r1
;
;	>>>   GET LINE FLAGS   <<<
;
	move	r2,(<MVMLPtr)			; Get Line Flags
	with	r2
	add	#rlmlFlags
;	to	r0
	ldb	(r2)
;
;	>>>   DETERMINE DIRECTION LINE IS CROSSED (R->L OR L->R)   <<<
;
	moves	r1,r1				; Crossed R->L or L->R?
	with	r2				; Save MoveLines Pointer
	bmi	_RM5XY2500			; Right to Left!
	to	rTemp
	beq	_RM5XY2200			; ON LINE!
	nop
_RM5XY2400
;	with	r0				; SOLID / IMPASSIBLE?
	and	#(rllfSolid|rllfImpassible)
	bne	_RM5XY2200			; YES!
;
;	>>>   LINE IS CROSSED LEFT -> RIGHT   <<<
;
	with	rPUX				; Flip Perpendicular UnitVector X
	not
	inc	rPUX
	with	rPUY				; Flip Perpendicular UnitVector Y
	not
	inc	rPUY
;
;	>>>   GET LINE VERTEX 2   <<<
;
	inc	r2
	inc	r2
	to	rLX1
	ldw	(r2)
	inc	r2
	inc	r2
	to	rLY1
	ldw	(r2)
	inc	r2				; Get HighFloor/LowCeiling
	bra	_RM5XY2600
	inc	r2
;
;	>>>   LINE IS CROSSED RIGHT -> LEFT   <<<
;
_RM5XY2500
;	with	r0				; SOLID / IMPASSIBLE?
	and	#(rllfSolid|rllfImpassible)
	bne	_RM5XY3000			; YES!  CAN'T CROSS IT!
;
;	>>>   GET HIGHFLOOR / LOWCEILING   <<<
;
	with	r2				; Get HighFloor/LowCeiling
	add	#(rlmlHighFloorHeight-rlmlFlags)
_RM5XY2600
	move	r1,(<MVIZ)			; R1 = ObjectZ
;
;	>>>   STEP TOO FAR UP?   <<<
;
	to	r4				; R4 = HighFloor
	ldw	(r2)
	from	r4				; R0 = (HighFloor - ObjectZ)
;	to	r0
	sub	r1
	move	r6,#(24+1)			; Step Too Far Up?
;	with	r0				; @CMP@
	sub	r6
	bge	_RM5XY3000			; YES!
;
;	>>>   ABOVE LOWER PASSAGE?   <<<
;
	inc	r2				; R0 = LowCeiling
	inc	r2
;	to	r0
	ldw	(r2)
	move	r6,#56				; Enough Ceiling Clearance?
	with	r1				; R1 = ObjectZ+Height
	add	r6
;	from	r0				; LowCeiling >= (ObjectZ+Height)?
	cmp	r1
	blt	_RM5XY3000			; NO!
;
;	>>>   ENOUGH FLOOR->CEILING CLEARANCE?   <<<
;
;	with	r0				; R0 = (LowCeiling-HighFloor)
	sub	r4
;	with	r0				; Enough Clearance?
	sub	r6				; @CMP@
	blt	_RM5XY3000			; NO!
;
;	>>>   MONSTERS WILL NOT WALK OFF CLIFFS!   <<<
;
	inc	r2				; R0 = LowFloor
	inc	r2
;	to	r0
	ldw	(r2)
	from	r4				; R0 = (HighFloor-LowFloor)
;	to	r0
	sub	r0
;	with	r0				; Large Cliff?
	sub	r6				; @CMP@
	bge	_RM5XY3000			; YES!
	nop
;
;	>>>   THIS LINE WILL NOT BLOCK MOVEMENT!   <<<
;
	iwt	r15,#<_RM5XY2200+1		; Yes, Check Next MoveLine

;
;	* * * * * * *       THIS LINE WILL BLOCK MOVEMENT       * * * * * * *
;
_RM5XY3000
;
;	>>>   ADJUST OBJECT MOVEMENT COORDINATES SO RADIUS INTERSECTS LINE   <<<
;
	move	r1,(<MVObjD)			; Object<->Line Collision Radius
	move	(<MVLPUY),rPUY			; Save Perpendicular UnitVector Y
;
	move	r6,rPUY				; Adjust MovementY
	from	r1
;	to	r0
	fmult
	move	r6,rPUX
	move	(<MVLPRY),r0
;
	with	rY0				; Move Initial Coordinate Away
	sub	r0
	with	rY1				; Move Final Coordinate Towards
	add	r0
	from	rY0				; -Ya
	to	rPUX
	sub	rY1
;
	from	r1				; Adjust MovementX
;	to	r0
	fmult
	move	(<MVLPRX),r0
;
	with	rX0				; Move Initial Coordinate Away
	sub	r0
	with	rX1				; Move Final Coordinate Towards
	add	r0
	from	rX1				; +Xa
	to	rPUY
	sub	rX0
	move	(<MVLPUX),r6			; Save Perpendicular UnitVector X

;
;	* * * * * * *       DOES LINE CROSS OBJECT?       * * * * * * *
;
;	>>>   GET LINE VERTEX 1   <<<
;
	from	rTemp				; Move to Line Vertex 1 X
	to	r2
	sub	#(rlmlFlags-rlmlLX1)
;	to	r0				; R0 = Vertex1 X
	ldw	(r2)
	move	r1,(<MVLRX)			; LineX Radius Adjustment
;	with	r0
	sub	r1
	inc	r2				; Move to Line Vertex 1 Y
	inc	r2
	to	r1				; R1 = Vertex1 Y
	ldw	(r2)
	move	r4,(<MVLRY)			; LineY Radius Adjustment
	with	r1
	sub	r4
	with	r1				; R1 = (LineY0 - ObjectY0)
	sub	rY0
	move	rTemp,r2			; Save MoveLines Entry Pointer
	link	#3
;	with	r0				; R0 = (LineX0 - ObjectX0)
	bra	_RM5XY4000
	sub	rX0
;
;	>>>   GET LINE VERTEX 2   <<<
;
	from	rTemp				; Restore MoveLines Entry Pointer
	to	r4
	add	#(rlmlLX2-rlmlLY1)
;	to	r0				; R0 = Vertex2 X
	ldw	(r4)
	move	r1,(<MVLRX)			; LineX Radius Adjustment
	inc	r4
	inc	r4
;	with	r0
	add	r1
	to	r1				; R1 = Vertex2 Y
	ldw	(r4)
	move	r4,(<MVLRY)			; LineY Radius Adjustment
	with	r1
	add	r4
	move	rTemp,r2			; Save SIDE1
	with	r1				; R1 = (LineY1 - ObjectY0)
	sub	rY0
	link	#3
;	with	r0				; R0 = (LineX1 - ObjectX0)
	bra	_RM5XY4000
	sub	rX0
;
	move	r0,(<MVLPRX)			; Move Initial Coordinate Towards
;	with	r0
	add	r0
	with	rX0
	add	r0
;
	move	r0,(<MVLPRY)			; Move Initial Coordinate Towards
;	with	r0
	add	r0
	with	rY0
	add	r0
;
	from	r2				; Opposite Sides?
;	to	r0
	xor	rTemp
	bpl	_RM5XY3900+1			; No, Line Doesn't Cross Object

;
;	>>>   DOES OBJECT CROSS LINE?   <<<
;
;_RM5XY3500
	move	rPUX,(<MVLPUX)
	move	rPUY,(<MVLPUY)
	from	rY0				; R1 = (ObjectY0 - LineY)
	to	r1
	sub	rLY1
	link	#4
	from	rX0				; R0 = (ObjectX0 - LineX)
;	to	r0
	bra	_RM5XY4000
	sub	rLX1
	moves	rTemp,r1			; ON "LEFT" SIDE AFTER FLIPPING?
;	dec	r1
;	bpl	_RM5XY3900			; YES!  DON'T INTERSECT BACKWARDS!
;
	from	rY1				; R1 = (ObjectY1 - LineY)
	to	r1
	sub	rLY1
	link	#4
	from	rX1				; R0 = (ObjectX1 - LineX)
;	to	r0
	bra	_RM5XY4000
	sub	rLX1
	dec	r1				; "LEFT"?
	bmi	_RM5XY3900			; "ON" or "RIGHT"
;
;	>>>   OBJECT CROSSES LINE   <<<
;
	moves	r0,rTemp			; Did Movement START "ON"?
	bmi	_RM5XY6000			; No,  Movement "RIGHT" to "LEFT" OK
	with	rPUX
	bne	_RM5XY3900			; No,  Movement "LEFT" to "LEFT" OK
	nop
	iwt	r15,#<_RM5XY7600		; Yes, Movement "ON" to "LEFT" BLOCKED!
	with	r4
;
;	>>>   OBJECT DOES NOT CROSS LINE   <<<
;
_RM5XY3900
	move	r0,(<MVLPRY)			; ReAdjust for Perpendicular Radius Offset
	with	rY0
	sub	r0
	with	rY1
	sub	r0
	move	r0,(<MVLPRX)			; ReAdjust for Perpendicular Radius Offset
	with	rX0
	sub	r0
	with	rX1
	sub	r0
	iwt	r15,#<_RM5XY2000		; No, Same Side

;
;	* * * * * * *       GET SIDE OF COORDINATE RELATIVE TO LINE       * * * * * * *
;
;	R0	=	(Coordinate X - Line X0)
;	R1	=	(Coordinate Y - Line Y0)
;	RPUX	=	(Line Perpendicular UnitVector X)
;	RPUY	=	(Line Perpendicular UnitVector Y)
;
;	R1	=	"ON"	= 0	(WITHIN 1 UnitVector Distance from Line)
;			"LEFT"	> 0	(Greater than 1 UnitVector to LEFT of Line)
;			"RIGHT"	< 0	(Greater than 1 UnitVector to RIGHT of Line)
;
;	* * * * * * *       GET DIRECTION OF COORDINATE RELATIVE TO LINE       * * * * * * *
;
;	R0	=	(Coordinate X - Line X0)
;	R1	=	(Coordinate Y - Line Y0)
;	RPUX	=	(Line Vector X)
;	RPUY	=	(Line Vector Y)
;
;	R2	=	"LEFT" >= 0	(ON or to LEFT of Line)
;			"RIGHT"	< 0	(RIGHT of Line)
;
_RM5XY4000
	move	r6,rPUY
	with	r1				; Result in R1:R2
_RM5XY4100
	lmult
	move	r2,r4
	move	r6,rPUX
;	with	r0				; Result in R0:R4
	lmult
	with	r2
	add	r4
	with	r1				; R1:R2 = SIDE
	adc	r0
	with	r1
	bpl	_RM5XY4200			; "RIGHT" or "ON"
	to	r2
	inc	r1				; "LEFT" or "ON"
_RM5XY4200
	jmp	r11
	nop

;
;	* * * * * * *       MOVEMENT BLOCKED BY LINE       * * * * * * *
;
_RM5XY6000
;
;	>>>   PROJECT OBJECT INITIAL COORDINATE ONTO LINE PERPENDICULAR   <<<
;
;	move	r6,rPUX				; L1 = (X0-LX0) * Perpendicular UnitVector X
	to	r6				; @WITH IN PIPELINE@
	from	rX0
;	to	r0
	sub	rLX1
;	with	r0
	fmult
;	with	r0
	rol
;
	move	r6,rPUY				;    + (Y0-LY0) * Perpendicular UnitVector Y
	from	rY0
	to	r1
	sub	rLY1
	with	r1
	fmult
	with	r1
	rol
;	from	r0
	to	r2
	add	r1
	bpl	_RM5XY7800
;
;	>>>   PROJECT OBJECT FINAL COORDINATE ONTO LINE PERPENDICULAR   <<<
;
	move	r6,rPUX				; L2 = (X1-LX0) * Perpendicular UnitVector X
	from	rX1
;	to	r0
	sub	rLX1
;	with	r0
	fmult
;	with	r0
	rol
;
	move	r6,rPUY				;    + (Y1-LY0) * Perpendicular UnitVector Y
	from	rY1
	to	r1
	sub	rLY1
	with	r1
	fmult
	with	r1
	rol
;	from	r0
	to	r4
	add	r1
	bmi	_RM5XY7800

;
;	* * * * * * *       CALCULATE INTERCEPTION PERCENTAGE       * * * * * * *
;
;			   |L1|
;	PERCENTAGE =	-----------
;			|L1| + |L2|
_RM5XY7000
	from	r4				; Get Divisor (L2-L1)
;	to	r0
	sub	r2
;	with	r0
	add	r0
	move	r1,#<(InvTable-2)
;	from	r0
	to	r14
	add	r1
;
	with	r2				; Get -L1
	not
	beq	_RM5XY7600			; Too Small!
	with	r4
	inc	r2
;
	dec	r0
	dec	r0
;
	to	r6				; Get Inverse Value
	getb
	inc	r14
;
;	with	r0				; Low/High Gear?
	hib
;
	with	r6
	getbh
;
	bne	_RM5XY7200			; Low
	from	r2				; High
;	to	r0
	alt1
	bra	_RM5XY7500
	fmult
_RM5XY7200
;	to	r0				; <<1
	add	r2
;	with	r0
	lmult
	with	r4
	hib
;	with	r0
	lob
;	with	r0
	swap
;	with	r0
	add	r4
;
;	>>>   DOES MOVEMENT COLLIDE CLOSER TO THIS LINE THAN ANY OTHER?   <<<
;
_RM5XY7500
	move	r1,(<MVIPercent)		; Get Lowest Percentage
	from	r4				; New Percentage Lower?
;	to	r0				; @CMP@
	sub	r1
	bge	_RM5XY7800			; No
_RM5XY7600
	sub	r4				; Force Percentage to 0 if Called Outside!
;
;	* * * * * * *       MOVEMENT COLLIDES CLOSER TO THIS LINE       * * * * * * *
;
	move	(<MVIPercent),r4		; Save New Intersection Percentage
	moves	r6,r4				; Invalid Movement?
	beq	_RM5XY9000			; Yes, don't continue scanning!
	nop
	move	(<MVIPUX),rPUX			; Save New Intersection UnitVector X
	move	(<MVIPUY),rPUY			; Save New Intersection UnitVector Y
;
;	>>>   CHECK NEXT MOVELINE   <<<
;
_RM5XY7800
	iwt	r15,#<_RM5XY3900+1		; Check Next MoveLine


	CACHEE	_RLMoveXY5


;
;	* * * * * * *       MOVEMENT COMPLETELY BLOCKED!       * * * * * * *
;
_RM5XY9000
	move	rObj,(<MVRObj)			; Get RLObject Pointer
	move	r15,(<MVReturnAddress)		; Return to Caller
;	with	r0				; R0 = 0 = MOVEMENT!
	sub	r0

;
;	* * * * * * *       MOVE OBJECT       * * * * * * *
;
_RM5XY8000
;
;	>>>   MOVE OBJECT THE MAXIMUM PERCENTAGE ALLOWED BEFORE COLLISION   <<<
;
	move	r6,(<MVIPercent)		; Percentage of Movement Without Collision
	inc	r6
	bmi	_RM5XY8200			; Entire Movement Allowed!
	dec	r6
	move	r0,#($1000>>1)			; Reduce Percentage to NOT Collide!
	with	r6
	sub	r0
;	with	r0				; Movement too close to Collision?
	sub	r6				; @CMP@
	bge	_RM5XY9000+1			; YES!  NO MOVEMENT POSSIBLE!
;
;	>>>   CALCULATE OBJECT NEW COORDINATES   <<<
;
_RM5XY8200
	move	rVX,(<MVVX)			; Velocity X
	move	rVY,(<MVVY)			; Velocity Y
	move	rObjP,(<MVRObj)
	with	rObjP
	add	#rloX
;
;	>>>   UPDATE X COORDINATE   <<<
;
	from	rVX				; R3:R1 = X Velocity * Percentage
;	to	r0
	fmult
;	with	r0
	rol
;	from	r0
	to	r1
	lob
	with	r1
	swap
;	with	r0
	hib
;	from	r0
	to	r3
	sex
;
;	to	r0				; R1 = X Coordinate Fraction
	ldw	(rObjP)
;	with	r0
	add	r1
;	from	r0
	sbk
	inc	rObjP
	inc	rObjP
;	to	r0				; RX0 = X Coordinate Integer
	ldw	(rObjP)
;	from	r0
	to	rX0
	adc	r3
	from	rX0
	sbk
	inc	rObjP
	inc	rObjP
;
;	>>>   UPDATE Y COORDINATE   <<<
;
	from	rVY				; R3:R2 = Y Velocity * Percentage
;	to	r0
	fmult
;	with	r0
	rol
;	from	r0
	to	r2
	lob
	with	r2
	swap
;	with	r0
	hib
;	from	r0
	to	r3
	sex
;
;	to	r0				; R2 = Y Coordinate Fraction
	ldw	(rObjP)
;	with	r0
	add	r2
;	from	r0
	sbk
	inc	rObjP
	inc	rObjP
;	to	r0				; RY0 = Y Coordinate Integer
	ldw	(rObjP)
;	from	r0
	to	rY0
	adc	r3
	from	rY0
	sbk
;
;	* * * * * * *       MOVEMENT COLLISIONS COMPLETED!       * * * * * * *
;
_RM5XY10000
;
;	>>>   REMOVE RLOBJECT FROM OLD SECTOR   <<<
;
	move	rObj,(<MVRObj)			; Get Object's Old SectorData
	link	#4				; Remove RLObject from Sector's ObjectList
	iwt	r15,#<_RLRemSectorObject
	nop
;
;	>>>   UPDATE OBJECT'S SECTOR/SECTORDATA   <<<
;
	link	#4				; Get Object's Sector
	iwt	r15,#<_RLGetXYSector
	nop
	move	r0,#rloSector
;	with	r0
	add	rObj
	from	rSector
	stb	(r0)
;
;	>>>   ADD RLOBJECT TO NEW SECTOR   <<<
;
	move	r11,#<_RLMoveXY7		; Add RLObject to Sector's ObjectList
	iwt	r15,#<_RLAddSectorObject
	nop
