;**********************************************************************
;*                                                                    *
;*                   P R O J E C T :   REALITY_ENGINE                 *
;*                                                                    *
;*                        ENGINE SOUND MODULE 2                       *
;*                                                                    *
;**********************************************************************

	include	rage.i
	include	rle.i
	include	gsumac.i
	include	rlsound.i
	include	music.i


	SECTION	ENGINE_GSUCODE
	cpu	sfx


;
;	* * * * * * *       CALCULATE SOUND EFFECT       * * * * * * *
;
;	R3 = Address of Sound Effect Table-1
;	R4 = X Coordinate of Sound Origin
;	R6 = Y Coordinate of Sound Origin
;
_RLSoundEffect
;
;	>>>   CALCULATE DISTANCE TO SOUND ORIGIN   <<<
;
	move	r0,(<ViewX)			; Get |(ViewX - SoundOriginX)|
;	with	r0
	sub	r4
	bpl	_RLSE1200
	nop
;	with	r0
	not
	inc	r0
_RLSE1200
	move	r1,(<ViewY)			; Get |(ViewY - SoundOriginY)|
	with	r1
	sub	r6
	bpl	_RLSE1400
	nop
	with	r1
	not
	inc	r1
_RLSE1400
;	from	r0				; |X| >= |Y|?
	cmp	r1
	bge	_RLSE1600			; Yes
	moves	r0,r1				; |Y| > |X|
_RLSE1600
	move	r1,#1024			; Maximum Hearing Distance
;	from	r0
	cmp	r1
	bge	_RLSE8000-2			; Too Far Away to Hear!
;
;	>>>   CALCULATE VOLUME LEVEL   <<<
;
_RLSE2000
	move	r1,#$fe				; Quiescent Hearing Distance
;	from	r0
	cmp	r1
	blt	_RLSE3000			; Maximum Volume
;	with	r0
	lsr
;	from	r0				; R1 = Index into RL->SCN Pixel Scale
	to	r1
	add	r0
	with	r1
	add	r0
	ibt	r0,#(^RLSCNPixScale)		; Move to RL->SCN Pixel Scaling Table
	romb
	move	r0,#<(RLSCNPixScale+(2*3))
;	from	r0
	to	r14
	add	r1
	getb
	inc	r14
	to	r6
	getbh
	move	r0,#($fe<<1)			; Maximum Volume
;	from	r0
	to	r1
	fmult

;
;	>>>   CALCULATE PANNING/BALANCE   <<<
;
_RLSE3000

;
;	>>>   GET SOUND EFFECT NUMBER   <<<
;
_RLSE4000
	ibt	r0,#(^_RLSoundEffects)		; Move to SoundEffects Bank
	romb
	move	r14,r3				; Move to SoundEffect Data
_RLSE4200
	inc	r14
	getb					; Get Volume Level
	inc	r14
;	with	r0				; Volume Threshold < Calculated Volume?
	sub	r1				; @CMP@
	blt	_RLSE4200			; Yes, keep scanning
	to	r3				; R3 = Sound Effect#
	getb

;
;	* * * * * * *       ADD SOUND EFFECT       * * * * * * *
;
_RLSoundEffect2
	with	r3				; R3 = Volume.B / Effect.B
	swap
	with	r3
	or	r1
;
	move	r0,(<RLNumSounds)		; Get #Sounds Added
	move	r1,#MaxRLSounds
;	from	r0				; Too Many?
	to	r4
	sub	r1
	bne	_RLSE7000			; No, Add One More!
	inc	r0
;
;	>>>   SCAN TO FIND SOUND EFFECT TO OVERWRITE   <<<
;
_RLSE6000
	move	r4,#<(RLGSUSounds-2)		; Scan for Lowest Priority
	move	r6,#0				; NO Lowest Priority
_RLSE6200
	inc	r4				; Next SoundEffect
	dec	r1				; Finished Scanning Priorities
	bmi	_RLSE6400
	inc	r4
;	to	r0				; Get SoundEffect Priority
	ldb	(r4)
;	with	r0				; Priority Lower than New Priority?
	sub	r3
;	with	r0
	lob
;	with	r0
	sex
	bpl	_RLSE6200			; No, Can't OverWrite!
;	with	r0				; Lower than Lowest Priority?
	sub	r6
	bge	_RLSE6200			; No
	with	r6				; YES!  New Lowest Priority!
	add	r0
	with	r4
	bra	_RLSE6200
	to	r14
_RLSE6400
	moves	r6,r6				; Any SoundEffect with Lower Priority?
	with	r14
	beq	_RLSE8000			; No
	to	r6
	from	r3				; Yes!  OverWrite It!
	stw	(r6)
_RLSE8000
	jmp	r11				; Return to Caller
	nop
;
;	>>>   SAVE SOUND EFFECT PARAMETERS   <<<
;
_RLSE7000
	sbk					; Update #Sounds
;	with	r0				; Move to SoundEffect Slot
	add	r0
;	umult	#rlseSize
	move	r6,#<(RLGSUSounds-rlseSize)
;	with	r0
	add	r6
	from	r3				; Save Volume.B / Effect.B
	stw	(r0)
	jmp	r11				; Return to Caller
	nop

;
;	* * * * * * *       START PLAYER SOUND EFFECT       * * * * * * *
;
;	R3 = SoundEffect#
;
_RLPlayerSoundEffect
	move	r1,#$ff				; Volume Level (Always Highest)
	bra	_RLSoundEffect2			; Add Sound Effect!
	nop
