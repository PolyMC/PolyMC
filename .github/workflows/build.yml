name: Build

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: ubuntu-20.04

          - os: ubuntu-20.04
            appimage: true

          - os: windows-2022
            name: "Windows-i686"
            msystem: mingw32

          - os: windows-2022
            name: "Windows-x86_64"
            msystem: mingw64

          - os: macos-11
            macosx_deployment_target: 10.13

    runs-on: ${{ matrix.os }}

    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macosx_deployment_target }}
      INSTALL_DIR: "install"
      INSTALL_PORTABLE_DIR: "install-portable"
      INSTALL_APPIMAGE_DIR: "install-appdir"
      BUILD_DIR: "build"
      CCACHE_VAR: ""

    steps:
      ##
      # PREPARE
      ##
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: 'Setup MSYS2'
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          update: true
          install: >-
            git
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p
            qt5:p
            ccache:p
            nsis:p

      - name: Setup ccache
        if: runner.os != 'Windows' && inputs.build_type == 'Debug'
        uses: hendrikmuhs/ccache-action@v1.2.1
        with:
          key: ${{ matrix.os }}-${{ matrix.appimage }}

      - name: Setup ccache (Windows)
        if: runner.os == 'Windows' && inputs.build_type == 'Debug'
        shell: msys2 {0}
        run: |
          ccache --set-config=cache_dir='${{ github.workspace }}\.ccache'
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
          ccache -p  # Show config
          ccache -z  # Zero stats

      - name: Use ccache on Debug builds only
        if: inputs.build_type == 'Debug'
        shell: bash
        run: |
          echo "CCACHE_VAR=ccache" >> $GITHUB_ENV

      - name: Retrieve ccache cache (Windows)
        if: runner.os == 'Windows' && inputs.build_type == 'Debug'
        uses: actions/cache@v3.0.2
        with:
          path: '${{ github.workspace }}\.ccache'
          key: ${{ matrix.os }}-${{ matrix.msystem }}
          restore-keys: |
              ${{ matrix.os }}-${{ matrix.msystem }}

      - name: Set short version
        shell: bash
        run: |
          ver_short=`git rev-parse --short HEAD`
          echo "VERSION=$ver_short" >> $GITHUB_ENV

      - name: Install Qt (macOS)
        if: runner.os == 'macOS'
        run: |
         brew update
         brew install qt@5 ninja

      - name: Update Qt (AppImage)
        if: runner.os == 'Linux' && matrix.appimage == true
        run: |
         sudo add-apt-repository ppa:savoury1/qt-5-15
         sudo add-apt-repository ppa:savoury1/kde-5-80
         sudo add-apt-repository ppa:savoury1/gpg
         sudo add-apt-repository ppa:savoury1/ffmpeg4

      - name: Install Qt (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y update
          sudo apt-get -y install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqt5core5a libqt5network5 libqt5gui5 ninja-build qt5-image-formats-plugins

      - name: Prepare AppImage (Linux)
        if: runner.os == 'Linux' && matrix.appimage == true
        run: |
          wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"

          ${{ github.workspace }}/.github/scripts/prepare_JREs.sh

      ##
      # CONFIGURE
      ##

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DENABLE_LTO=ON -DQt5_DIR=/usr/local/opt/qt@5 -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5 -DLauncher_BUILD_PLATFORM=macOS -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -G Ninja

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DENABLE_LTO=ON -DLauncher_BUILD_PLATFORM=${{ matrix.name }} -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -G Ninja

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DENABLE_LTO=ON -DLauncher_BUILD_PLATFORM=Linux -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CCACHE_VAR }} -G Ninja

      ##
      # BUILD
      ##

      - name: Build
        if: runner.os != 'Windows'
        run: |
          cmake --build ${{ env.BUILD_DIR }}

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake --build ${{ env.BUILD_DIR }}

      ##
      # TEST
      ##

      - name: Test
        if: runner.os != 'Windows'
        run: |
          ctest --test-dir build --output-on-failure

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          ctest --test-dir build --output-on-failure

      ##
      # PACKAGE BUILDS
      ##

      - name: Package (macOS)
        if: runner.os == 'macOS'
        run: |
          cmake --install ${{ env.BUILD_DIR }}

          cd ${{ env.INSTALL_DIR }}
          chmod +x "PolyMC.app/Contents/MacOS/polymc"
          sudo codesign --sign - --deep --force --entitlements "../program_info/App.entitlements" --options runtime "PolyMC.app/Contents/MacOS/polymc"
          tar -czf ../PolyMC.tar.gz *

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake --install ${{ env.BUILD_DIR }}

          cd ${{ env.INSTALL_DIR }}
          if [ "${{ matrix.msystem }}" == "mingw32" ]; then
            cp /mingw32/bin/libcrypto-1_1.dll /mingw32/bin/libssl-1_1.dll ./
          elif [ "${{ matrix.msystem }}" == "mingw64" ]; then
            cp /mingw64/bin/libcrypto-1_1-x64.dll /mingw64/bin/libssl-1_1-x64.dll ./
          fi

      - name: Package (Windows, portable)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cp -r ${{ env.INSTALL_DIR }} ${{ env.INSTALL_PORTABLE_DIR }}  # cmake install on Windows is slow, let's just copy instead
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }} --component portable

      - name: Package (Windows, installer)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cd ${{ env.INSTALL_DIR }}
          makensis -NOCD "-DVERSION=${{ env.VERSION }}" "-DMUI_ICON=${{ github.workspace }}/program_info/polymc.ico" "-XOutFile ${{ github.workspace }}/PolyMC-Setup.exe" "${{ github.workspace }}/program_info/win_install.nsi"

      - name: Package (Linux)
        if: runner.os == 'Linux' && matrix.appimage != true
        run: |
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}

          cd ${{ env.INSTALL_DIR }}
          tar --owner root --group root -czf ../PolyMC.tar.gz *

      - name: Package (Linux, portable)
        if: runner.os == 'Linux' && matrix.appimage != true
        run: |
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }}
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }} --component portable

          cd ${{ env.INSTALL_PORTABLE_DIR }}
          tar -czf ../PolyMC-portable.tar.gz *

      - name: Package AppImage (Linux)
        if: runner.os == 'Linux' && matrix.appimage == true
        shell: bash
        run: |
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr

          export OUTPUT="PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage"

          chmod +x linuxdeploy-*.AppImage

          mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-{8,17}-openjdk

          cp -r ${{ github.workspace }}/JREs/jre8/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-8-openjdk

          cp -r ${{ github.workspace }}/JREs/jre17/* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-17-openjdk

          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-8-openjdk/lib/amd64/server"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-8-openjdk/lib/amd64"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-17-openjdk/lib/server"
          LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib/jvm/java-17-openjdk/lib"
          export LD_LIBRARY_PATH

          ./linuxdeploy-x86_64.AppImage --appdir ${{ env.INSTALL_APPIMAGE_DIR }} --output appimage --plugin qt -i ${{ env.INSTALL_APPIMAGE_DIR }}/usr/share/icons/hicolor/scalable/apps/org.polymc.PolyMC.svg

      ##
      # UPLOAD BUILDS
      ##

      - name: Upload binary tarball (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC.tar.gz

      - name: Upload binary zip (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ matrix.name }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: ${{ env.INSTALL_DIR }}/**

      - name: Upload binary zip (Windows, portable)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ matrix.name }}-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
          path: ${{ env.INSTALL_PORTABLE_DIR }}/**

      - name: Upload installer (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ matrix.name }}-Setup-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC-Setup.exe

      - name: Upload binary tarball (Linux)
        if: runner.os == 'Linux' && matrix.appimage != true
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC.tar.gz

      - name: Upload binary tarball (Linux, portable)
        if: runner.os == 'Linux' && matrix.appimage != true
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-Portable-${{ env.VERSION }}-${{ inputs.build_type }}
          path: PolyMC-portable.tar.gz

      - name: Upload AppImage (Linux)
        if: runner.os == 'Linux' && matrix.appimage == true
        uses: actions/upload-artifact@v3
        with:
          name: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage
          path: PolyMC-${{ runner.os }}-${{ env.VERSION }}-${{ inputs.build_type }}-x86_64.AppImage


